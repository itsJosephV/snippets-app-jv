// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  username  String     @unique
  password  String
  createAt  DateTime   @default(now())
  sections  Section[]
  favorites Favorite[]
}

model Section {
  id      String   @id @default(uuid())
  title   String
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folders Folder[]
}

model Folder {
  id        String    @id @default(uuid())
  title     String
  sectionId String?
  section   Section?  @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  snippets  Snippet[]
}

model Snippet {
  id          String     @id @default(uuid())
  title       String
  content     String
  syntax      String
  folderId    String
  folder      Folder     @relation(fields: [folderId], references: [id])
  favoritedBy Favorite[]
}

model Favorite {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  snippetId String
  snippet   Snippet @relation(fields: [snippetId], references: [id])
}
